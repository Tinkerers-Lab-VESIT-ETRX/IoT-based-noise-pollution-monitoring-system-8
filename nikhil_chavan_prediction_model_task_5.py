# -*- coding: utf-8 -*-
"""Nikhil chavan Prediction Model Task 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q18MKd6G7NIH0g2KbK9XTW5WpVabBksK
"""

from google.colab import drive
drive.mount ('/content/drive/')

!pip install -q keras

import keras

import pandas as pd
import numpy as np

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df=pd.read_csv('/content/drive/MyDrive/city_data.csv')

df.head(5)

df.info()

df.describe()

#CORRELATION_ANALYSIS
sns.heatmap(df.corr(),annot=True)

d=df.groupby(['City'])[['AQI']].mean().sort_values(by='AQI',ascending=False).head(10)
newdf=d.reset_index('City')

newdf

plt.figure(figsize=(10,5))
sns.barplot(data=newdf,x='AQI',y='City',orient='h',palette='viridis')

ndf = df.head(10)
n=ndf.dropna(axis=1)
ndf=n.drop('Date',axis=1)
nndf=ndf.drop('City',axis=1)
nndf

sns.pairplot(nndf)

df.columns

df['Year'] = pd.DatetimeIndex(df['Date']).year
df['Month'] = pd.DatetimeIndex(df['Date']).month
ddf=df.groupby(['City','Year','Month'])[['PM2.5','PM10','NOx','CO','NH3','O3','SO2','Benzene','Toluene','Xylene','AQI']].mean()
ndf=ddf.reset_index(['City','Year','Month'])

ndf.head

"""**Model**"""

X=nndf[[ 'NOx', 'SO2','O3', 'Benzene', 'Toluene', 'Xylene']]
y=ndf['AQI'].head(10)

"""**Train and Test**"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)

from sklearn.linear_model import LinearRegression
lm=LinearRegression()
lm.fit(X_train,y_train)
LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)
print(lm.intercept_)

lm.coef_

cdf=pd.DataFrame(lm.coef_,X.columns,columns=['Coeff'])
cdf

"""**Prediction**"""

predictions=lm.predict(X_test)

predictions

plt.scatter(y_test,predictions)

sns.distplot((y_test-predictions))

from sklearn import metrics
metrics.mean_absolute_error(y_test,predictions)

metrics.mean_squared_error(y_test,predictions)

np.sqrt(metrics.mean_squared_error(y_test,predictions))

"""**prediction task done**"""